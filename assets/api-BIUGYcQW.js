import{g as r}from"./index-sGsfe3bR.js";import{i as s}from"./index-B2U43_5X.js";class c{static async getByName(e){try{const i=await(await(await r()).getFileHandle(`${e}`)).getFile();return JSON.parse(await i.text())}catch{return console.error("File not found:",e),null}}static async update(e){const a=await r(),t={...e,tags:[],updatedAt:new Date().getTime()},n=await(await a.getFileHandle(t.id,{create:!0})).createWritable();return await n.write(JSON.stringify(t)),await n.close(),t}static async delete(e){await(await r()).removeEntry(e)}static async getAll(){const e=await r(),a=[];for await(const[t,i]of e.entries())if(i.kind==="file"){const n=await i.getFile(),o=JSON.parse(await n.text());a.push(o)}return a}static async create(e){const a=await r(),t={...e,tags:[],createdAt:new Date().getTime(),updatedAt:new Date().getTime()},n=await(await a.getFileHandle(t.id,{create:!0})).createWritable();await n.write(JSON.stringify(t)),await n.close()}static async createFolder(e){return await(await window.showDirectoryPicker()).getDirectoryHandle(e,{create:!0})}}const f=s((l,e)=>({notes:[],fetchNotes:async()=>{const t=[...await c.getAll()].sort((i,n)=>n.updatedAt-i.updatedAt);return l({notes:t}),t}}));export{c as N,f as u};
